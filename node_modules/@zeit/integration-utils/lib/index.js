"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const micro_1 = require("micro");
const zeit_client_1 = __importDefault(require("./zeit-client"));
const uid_promise_1 = __importDefault(require("uid-promise"));
const htm_1 = require("./htm");
function getWelcomeMessage() {
    return `
		<html>
			<head>
				<style>
					body{
						font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
						text-rendering: optimizeLegibility;
						line-height: 25px;
						text-align: center;
						display: flex;
						flex-direction: column;
						justify-content: center;
					}

					a {
					  color: #067df7;
						text-decoration: none;
						border-bottom: 1px solid;
					}

					a:hover {
						opacity: 0.6;
					}
				</style>
			</head>
			<body>
				<h1>This is a ZEIT Integration UIHook!</h1>
				<p>
					Next, this UIHook needs to accept HTTP POST requests.
					<br/>
					To learn more about that, <a href="https://zeit.co/docs/integrations#creating-an-integration/step-3-creating-your-integration">click here</a>.
				</p>
			</body>
		</html>
	`;
}
function withUiHook(handler) {
    return async function (req, res) {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Authorization, Accept, Content-Type');
        if (req.method === 'OPTIONS') {
            return micro_1.send(res, 200);
        }
        if (req.method === 'GET') {
            return micro_1.send(res, 200, getWelcomeMessage());
        }
        if (req.method !== 'POST') {
            return micro_1.send(res, 404, '404 - Not Found');
        }
        try {
            const payload = (await micro_1.json(req));
            const { token, teamId, slug, integrationId, configurationId } = payload;
            const zeitClient = new zeit_client_1.default({ token, teamId, slug, integrationId, configurationId });
            const output = await handler({ payload, zeitClient });
            if (output.isAST === true) {
                const renderedAST = htm_1.renderAST(output);
                return micro_1.send(res, 200, renderedAST);
            }
            return micro_1.send(res, 200, String(output));
        }
        catch (err) {
            const code = await uid_promise_1.default(20);
            console.error(`Error on UiHook[${code}]: ${err.stack}`);
            micro_1.send(res, 200, `
				<Page>
					<Box/>
					<Box color="red">
						<Box fontSize="18px" fontWeight="600">Internal Integration Error</Box>
						<Box fontWeight="500">Reference Code: ${code}</Box>
						<Box fontSize="12px" lineHeight="15px">Contact the Integration developer for more information.</Box>
					</Box>
				</Page>
			`);
        }
    };
}
exports.withUiHook = withUiHook;
__export(require("./types"));
__export(require("./htm"));

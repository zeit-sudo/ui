"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const htm_1 = __importDefault(require("htm"));
function renderAST(node) {
    if (node === null) {
        return 'null';
    }
    if (node === undefined) {
        return 'undefined';
    }
    if (typeof node === 'string') {
        return escapeContent(node);
    }
    if (node.map) {
        return node.map((item) => renderAST(item)).join('\n');
    }
    // This some other node
    if (!node.isAST) {
        return escapeContent(String(node));
    }
    const { type, propsString, children } = node;
    const childrenStr = children
        .map((child) => renderAST(child))
        .join('\n');
    return `<${type} ${propsString}>${childrenStr}</${type}>`;
}
exports.renderAST = renderAST;
function escapeContent(node) {
    const lines = node.split('\n');
    const value = lines
        .map((line, index) => {
        const nl = index < lines.length - 1 ? '\n' : '';
        return `{${JSON.stringify(line + nl)}}`;
    })
        .join('');
    return value;
}
function escapePropValue(value) {
    const stringValue = String(value);
    var map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot',
        "'": "'"
    };
    return stringValue.replace(/[&<>"']/g, function (m) {
        return map[m];
    });
}
function escapePropName(value) {
    const stringValue = String(value);
    var map = {
        '&': '',
        '<': '',
        '>': '',
        '"': '',
        "'": ''
    };
    return stringValue.replace(/[&<>"']/g, function (m) {
        return map[m];
    });
}
function buildASTNode(type, props, ...children) {
    if (typeof type === 'function') {
        return type({ ...props, children });
    }
    let propsString = '';
    Object.keys(props || {}).forEach(name => {
        const value = props[name];
        propsString += `${escapePropName(name)}="${escapePropValue(value)}" `;
    });
    return {
        isAST: true,
        type,
        propsString,
        children
    };
}
exports.htm = htm_1.default.bind(buildASTNode);
